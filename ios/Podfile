source 'https://github.com/CocoaPods/Specs.git' 
# source 'https://cdn.cocoapods.org/'
source 'https://github.com/SumSubstance/Specs.git'

require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require File.join(File.dirname(`node --print "require.resolve('@react-native-community/cli-platform-ios/package.json')"`), "native_modules")

platform :ios, '15.1'
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

project 'wallet',
        'Debug Testnet' => :debug,
        'Release Testnet' => :release

target 'WhalesApp' do
  use_expo_modules!
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    :fabric_enabled => true,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # pod 'OpenSSL-Universal', :modular_headers => true, :configurations => ['Release', 'Release Testnet', 'Debug', 'Debug Testnet']
  pod 'Mindbox'
  
  post_install do |installer|
    react_native_post_install(
      installer,
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )

    # Workaround `Cycle inside FBReactNativeSpec` error for react-native 0.64
    # Reference: https://github.com/software-mansion/react-native-screens/issues/842#issuecomment-812543933
    installer.pods_project.targets.each do |target|

      if (target.name&.eql?('FBReactNativeSpec'))
        target.build_phases.each do |build_phase|
          if (build_phase.respond_to?(:name) && build_phase.name.eql?('[CP-User] Generate Specs'))
            target.build_phases.move(build_phase, 0)
          end
        end
      end

      # Workaround for Flipper on XCode 15.3
      if target.name == 'Flipper'
        file_path = 'Pods/Flipper/xplat/Flipper/FlipperTransportTypes.h'
        if (File.exist?(file_path))
          contents = File.read(file_path)
          if (!contents.include?('#include <functional>'))
            mod_content = contents.gsub("#pragma once", "#pragma once\n#include <functional>")
            File.chmod(0755, file_path)
            File.open(file_path, 'w') do |file|
              file.puts(mod_content)
            end
          end
        end
      end

    end

    # Strip bitcode from hermes framework
    puts "[BITCODE STRIP] Starting bitcode stripping process for hermes.framework"
    puts "[BITCODE STRIP] Build environment: XCODE_CLOUD=#{ENV['CI_XCODE_CLOUD'] || 'false'}, CI=#{ENV['CI'] || 'false'}"

    bitcode_strip_path = `xcrun -find bitcode_strip`.chomp
    puts "[BITCODE STRIP] Using bitcode_strip at: #{bitcode_strip_path}"

    def strip_bitcode_from_framework(bitcode_strip_path, framework_path)
      if File.exist?(framework_path)
        puts "[BITCODE STRIP] Found framework at: #{framework_path}"
        command = "#{bitcode_strip_path} \"#{framework_path}\" -r -o \"#{framework_path}\""
        puts "[BITCODE STRIP] Executing: #{command}"
        result = system(command)
        puts "[BITCODE STRIP] Command result: #{result ? 'Success' : 'Failed'}"
        return result
      else
        puts "[BITCODE STRIP] Framework not found at: #{framework_path}"
        return false
      end
    end
    # For both local builds and Xcode Cloud builds
    # Check built products directory first
    puts "[BITCODE STRIP] Searching in build directory: #{installer.sandbox.root}/../build"
    hermes_paths = Dir.glob("#{installer.sandbox.root}/../build/**/*.app/Frameworks/hermes.framework/hermes")
    puts "[BITCODE STRIP] Found #{hermes_paths.count} hermes paths in build directory"
    hermes_paths.each do |hermes_path|
      strip_bitcode_from_framework(bitcode_strip_path, hermes_path)
    end
    # Check derived data directory for Xcode Cloud builds
    derived_data = ENV['DERIVED_DATA_PATH'] || ENV['OBJROOT']
    if derived_data
      puts "[BITCODE STRIP] Searching in derived data directory: #{derived_data}"
      hermes_paths = Dir.glob("#{derived_data}/**/*.app/Frameworks/hermes.framework/hermes")
      puts "[BITCODE STRIP] Found #{hermes_paths.count} hermes paths in derived data"
      hermes_paths.each do |hermes_path|
        strip_bitcode_from_framework(bitcode_strip_path, hermes_path)
      end
    else
      puts "[BITCODE STRIP] No derived data directory found"
    end
    # Also check for the specific path mentioned in your error
    app_names = ['Tonhub.app', 'WhalesApp.app']
    xcode_build_dir = ENV['CONFIGURATION_BUILD_DIR']
    if xcode_build_dir
      puts "[BITCODE STRIP] Checking build directory: #{xcode_build_dir}"
      app_names.each do |app_name|
        hermes_path = "#{xcode_build_dir}/#{app_name}/Frameworks/hermes.framework/hermes"
        strip_bitcode_from_framework(bitcode_strip_path, hermes_path)
      end
    else
      puts "[BITCODE STRIP] No CONFIGURATION_BUILD_DIR environment variable found"
    end
    puts "[BITCODE STRIP] Environment variables for debugging:"
    ['CI', 'CI_XCODE_CLOUD', 'CONFIGURATION_BUILD_DIR', 'DERIVED_DATA_PATH', 'OBJROOT', 'BUILT_PRODUCTS_DIR'].each do |env_var|
      puts "[BITCODE STRIP] #{env_var}=#{ENV[env_var] || 'not set'}"
    end

    # Add a script phase to strip bitcode from hermes
    installer.pods_project.targets.each do |target|
      if target.name == 'WhalesApp'
        puts "[BITCODE STRIP] Adding script phase to target: #{target.name}"
        phase = target.new_shell_script_build_phase('Strip Bitcode from Hermes')
        phase.shell_script = <<-SCRIPT
          echo "[BITCODE STRIP][SCRIPT] Starting hermes bitcode strip build phase"
          echo "[BITCODE STRIP][SCRIPT] Running in environment: CI=${CI:-false}, CI_XCODE_CLOUD=${CI_XCODE_CLOUD:-false}"
          echo "[BITCODE STRIP][SCRIPT] Build directory: ${BUILT_PRODUCTS_DIR:-not set}"
          echo "[BITCODE STRIP][SCRIPT] Product name: ${FULL_PRODUCT_NAME:-not set}"

          set -e
          BITCODE_STRIP=$(xcrun -find bitcode_strip)
          echo "[BITCODE STRIP][SCRIPT] Using bitcode_strip at: $BITCODE_STRIP"

          FRAMEWORK_PATH="${BUILT_PRODUCTS_DIR}/${FULL_PRODUCT_NAME}/Frameworks/hermes.framework"
          echo "[BITCODE STRIP][SCRIPT] Looking for hermes framework at: $FRAMEWORK_PATH"

          if [ -d "$FRAMEWORK_PATH" ]; then
            echo "[BITCODE STRIP][SCRIPT] Found hermes framework directory"
            HERMES_BINARY="$FRAMEWORK_PATH/hermes"
            if [ -f "$HERMES_BINARY" ]; then
              echo "[BITCODE STRIP][SCRIPT] Found hermes binary, stripping bitcode"
              $BITCODE_STRIP -r -o "$HERMES_BINARY" "$HERMES_BINARY"
              echo "[BITCODE STRIP][SCRIPT] Bitcode stripping completed with status: $?"
            else
              echo "[BITCODE STRIP][SCRIPT] Hermes binary not found at: $HERMES_BINARY"
            fi
          else
            echo "[BITCODE STRIP][SCRIPT] Hermes framework directory not found at: $FRAMEWORK_PATH"
          fi
          echo "[BITCODE STRIP][SCRIPT] Also trying with find command"
          find "${BUILT_PRODUCTS_DIR}/${FULL_PRODUCT_NAME}/Frameworks" -name "hermes.framework" -type d -exec echo "[BITCODE STRIP][SCRIPT] Found hermes framework: {}" \\;
          find "${BUILT_PRODUCTS_DIR}/${FULL_PRODUCT_NAME}/Frameworks/hermes.framework" -name "hermes" -type f -exec echo "[BITCODE STRIP][SCRIPT] Found hermes binary: {}" \\;
          find "${BUILT_PRODUCTS_DIR}/${FULL_PRODUCT_NAME}/Frameworks/hermes.framework" -name "hermes" -type f -exec $BITCODE_STRIP -r -o {} {} \\; 2>/dev/null || true
          echo "[BITCODE STRIP][SCRIPT] Completed hermes bitcode strip build phase"
        SCRIPT
        phase.show_env_vars_in_log = '1'
        puts "[BITCODE STRIP] Successfully added script phase to target: #{target.name}"
      end
    end
  end

  def node_require(script)
    # Resolve script with node to allow for hoisting
    require Pod::Executable.execute_command('node', ['-p',
     "require.resolve(
       '#{script}',
       {paths: [process.argv[1]]},
     )", __dir__]).strip
  end

  # Use it to require both react-native's and this package's scripts:
  node_require('react-native/scripts/react_native_pods.rb')
  node_require('react-native-permissions/scripts/setup.rb')

  # ⬇️ uncomment the permissions you need
  setup_permissions([
    # 'AppTrackingTransparency',
    # 'Bluetooth',
    # 'Calendars',
    # 'CalendarsWriteOnly',
    'Camera',
    # 'Contacts',
    # 'FaceID',
    # 'LocationAccuracy',
    # 'LocationAlways',
    # 'LocationWhenInUse',
    # 'MediaLibrary',
    # 'Microphone',
    # 'Motion',
    # 'Notifications',
    # 'PhotoLibrary',
    # 'PhotoLibraryAddOnly',
    # 'Reminders',
    # 'Siri',
    # 'SpeechRecognition',
    # 'StoreKit',
  ])
end
