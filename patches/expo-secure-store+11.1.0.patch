diff --git a/node_modules/expo-secure-store/android/src/main/java/expo/modules/securestore/AuthenticationHelper.kt b/node_modules/expo-secure-store/android/src/main/java/expo/modules/securestore/AuthenticationHelper.kt
index 3453800..83c65e2 100644
--- a/node_modules/expo-secure-store/android/src/main/java/expo/modules/securestore/AuthenticationHelper.kt
+++ b/node_modules/expo-secure-store/android/src/main/java/expo/modules/securestore/AuthenticationHelper.kt
@@ -125,29 +125,56 @@ class AuthenticationHelper(
     }
 
     val biometricManager = BiometricManager.from(context)
-    when (biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG)) {
-      BiometricManager.BIOMETRIC_ERROR_HW_UNAVAILABLE, BiometricManager.BIOMETRIC_ERROR_NO_HARDWARE -> {
-        promise.reject(
-          "ERR_SECURESTORE_AUTH_NOT_AVAILABLE",
-          "No hardware available for biometric authentication. Use expo-local-authentication to check if the device supports it."
-        )
-        return
-      }
-      BiometricManager.BIOMETRIC_ERROR_NONE_ENROLLED -> {
-        promise.reject(
-          "ERR_SECURESTORE_AUTH_NOT_CONFIGURED",
-          "No biometrics are currently enrolled"
-        )
-        return
+      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {
+        when (biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG)) {
+          BiometricManager.BIOMETRIC_ERROR_HW_UNAVAILABLE, BiometricManager.BIOMETRIC_ERROR_NO_HARDWARE -> {
+            promise.reject(
+              "ERR_SECURESTORE_AUTH_NOT_AVAILABLE",
+              "No hardware available for biometric authentication. Use expo-local-authentication to check if the device supports it."
+            )
+            return
+          }
+          BiometricManager.BIOMETRIC_ERROR_NONE_ENROLLED -> {
+            promise.reject(
+              "ERR_SECURESTORE_AUTH_NOT_CONFIGURED",
+              "No biometrics are currently enrolled"
+            )
+            return
+          }
+        }
+      } else {
+          val canAuthenticateWithBiometry = biometricManager
+              .canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG)
+          if (canAuthenticateWithBiometry != BiometricManager.BIOMETRIC_SUCCESS) {
+              val canAuthenticateWithPasscode = biometricManager
+                  .canAuthenticate(BiometricManager.Authenticators.DEVICE_CREDENTIAL)
+              if (canAuthenticateWithPasscode != BiometricManager.BIOMETRIC_SUCCESS) {
+                  promise.reject(
+                      "ERR_SECURESTORE_AUTH_NOT_CONFIGURED",
+                      "Nor device credentials nor biometrics are available"
+                  )
+                  return
+              }
+          }
       }
-    }
 
     val title = options.getString(AUTHENTICATION_PROMPT_PROPERTY, " ")
 
-    val promptInfo = PromptInfo.Builder()
-      .setTitle(title)
-      .setNegativeButtonText(context.getString(android.R.string.cancel))
-      .build()
+    val promptInfo = if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {
+      PromptInfo.Builder()
+        .setTitle(title)
+        .setAllowedAuthenticators(BiometricManager.Authenticators.BIOMETRIC_STRONG
+                or BiometricManager.Authenticators.DEVICE_CREDENTIAL)
+        .setNegativeButtonText(context.getString(android.R.string.cancel))
+        .build()
+    } else {
+      PromptInfo.Builder()
+        .setTitle(title)
+        .setAllowedAuthenticators(BiometricManager.Authenticators.BIOMETRIC_STRONG
+                  or BiometricManager.Authenticators.DEVICE_CREDENTIAL)
+        .build()
+    }
+
     val fragmentActivity = getCurrentActivity() as FragmentActivity?
     if (fragmentActivity == null) {
       promise.reject(
@@ -174,13 +201,12 @@ class AuthenticationHelper(
                 promise,
                 encryptionCallback,
                 cipher,
-                gcmParameterSpec,
-                { promise, result ->
-                  val obj = result as JSONObject
-                  obj.put(REQUIRE_AUTHENTICATION_PROPERTY, true)
-                  postEncryptionCallback?.run(promise, result)
-                }
-              )
+                gcmParameterSpec
+              ) { promise, result ->
+                val obj = result as JSONObject
+                obj.put(REQUIRE_AUTHENTICATION_PROPERTY, true)
+                postEncryptionCallback?.run(promise, result)
+              }
             }
 
             override fun onAuthenticationError(errorCode: Int, errString: CharSequence) {
diff --git a/node_modules/expo-secure-store/android/src/main/java/expo/modules/securestore/SecureStoreModule.java b/node_modules/expo-secure-store/android/src/main/java/expo/modules/securestore/SecureStoreModule.java
index 91e9b85..055a615 100644
--- a/node_modules/expo-secure-store/android/src/main/java/expo/modules/securestore/SecureStoreModule.java
+++ b/node_modules/expo-secure-store/android/src/main/java/expo/modules/securestore/SecureStoreModule.java
@@ -389,12 +389,23 @@ public class SecureStoreModule extends ExportedModule {
     public KeyStore.SecretKeyEntry initializeKeyStoreEntry(KeyStore keyStore, ReadableArguments options) throws GeneralSecurityException {
       String keystoreAlias = getKeyStoreAlias(options);
       int keyPurposes = KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT;
-      AlgorithmParameterSpec algorithmSpec = new KeyGenParameterSpec.Builder(keystoreAlias, keyPurposes)
-          .setKeySize(AES_KEY_SIZE_BITS)
-          .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
-          .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
-          .setUserAuthenticationRequired(options.getBoolean(AuthenticationHelper.REQUIRE_AUTHENTICATION_PROPERTY, false))
-          .build();
+      AlgorithmParameterSpec algorithmSpec;
+      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.R) {
+        algorithmSpec = new KeyGenParameterSpec.Builder(keystoreAlias, keyPurposes)
+            .setKeySize(AES_KEY_SIZE_BITS)
+            .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
+            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
+            .setUserAuthenticationParameters(0, KeyProperties.AUTH_BIOMETRIC_STRONG | KeyProperties.AUTH_DEVICE_CREDENTIAL)
+            .setUserAuthenticationRequired(options.getBoolean(AuthenticationHelper.REQUIRE_AUTHENTICATION_PROPERTY, false))
+            .build();
+      } else {
+        algorithmSpec = new KeyGenParameterSpec.Builder(keystoreAlias, keyPurposes)
+            .setKeySize(AES_KEY_SIZE_BITS)
+            .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
+            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
+            .setUserAuthenticationRequired(options.getBoolean(AuthenticationHelper.REQUIRE_AUTHENTICATION_PROPERTY, false))
+            .build();
+      }
 
       KeyGenerator keyGenerator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, keyStore.getProvider());
       keyGenerator.init(algorithmSpec);
