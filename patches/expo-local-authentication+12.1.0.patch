diff --git a/node_modules/expo-local-authentication/android/src/main/java/expo/modules/localauthentication/LocalAuthenticationModule.kt b/node_modules/expo-local-authentication/android/src/main/java/expo/modules/localauthentication/LocalAuthenticationModule.kt
index a96b09e..3caf7ca 100644
--- a/node_modules/expo-local-authentication/android/src/main/java/expo/modules/localauthentication/LocalAuthenticationModule.kt
+++ b/node_modules/expo-local-authentication/android/src/main/java/expo/modules/localauthentication/LocalAuthenticationModule.kt
@@ -27,6 +27,7 @@ class LocalAuthenticationModule(context: Context) : ExportedModule(context), Act
   private val AUTHENTICATION_TYPE_FINGERPRINT = 1
   private val AUTHENTICATION_TYPE_FACIAL_RECOGNITION = 2
   private val AUTHENTICATION_TYPE_IRIS = 3
+  private val AUTHENTICATION_TYPE_PASSCODE = 4
   private val SECURITY_LEVEL_NONE = 0
   private val SECURITY_LEVEL_SECRET = 1
   private val SECURITY_LEVEL_BIOMETRIC = 2
@@ -120,6 +121,50 @@ class LocalAuthenticationModule(context: Context) : ExportedModule(context), Act
     promise.resolve(results)
   }
 
+  @ExpoMethod
+  fun supportedSecureStoreAuthenticationTypesAsync(promise: Promise) {
+    val biometricRes = biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG) == BiometricManager.BIOMETRIC_SUCCESS
+    val results: MutableList<Int> = ArrayList()
+    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {
+      if (!biometricRes) {
+        promise.resolve(results)
+        return
+      }
+    } else {
+      val passcodeRes = biometricManager.canAuthenticate(BiometricManager.Authenticators.DEVICE_CREDENTIAL) == BiometricManager.BIOMETRIC_SUCCESS
+      if (!biometricRes && !passcodeRes) {
+        promise.resolve(results)
+        return
+      } else {
+        if (passcodeRes) results.add(AUTHENTICATION_TYPE_PASSCODE)
+        if (biometricRes) {
+          // note(cedric): replace hardcoded system feature strings with constants from
+          // PackageManager when dropping support for Android SDK 28
+          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            if (packageManager.hasSystemFeature("android.hardware.fingerprint")) {
+              results.add(AUTHENTICATION_TYPE_FINGERPRINT)
+            }
+          }
+          if (Build.VERSION.SDK_INT >= 29) {
+            if (packageManager.hasSystemFeature("android.hardware.biometrics.face")) {
+              results.add(AUTHENTICATION_TYPE_FACIAL_RECOGNITION)
+            }
+            if (packageManager.hasSystemFeature("android.hardware.biometrics.iris")) {
+              results.add(AUTHENTICATION_TYPE_IRIS)
+            }
+          }
+
+          // check for face recognition support on some samsung devices
+          if (packageManager.hasSystemFeature("com.samsung.android.bio.face") && !results.contains(AUTHENTICATION_TYPE_FACIAL_RECOGNITION)) {
+            results.add(AUTHENTICATION_TYPE_FACIAL_RECOGNITION)
+          }
+        }
+      }
+    }
+
+    promise.resolve(results)
+  }
+
   @ExpoMethod
   fun hasHardwareAsync(promise: Promise) {
     val result = biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_WEAK)
@@ -145,6 +190,23 @@ class LocalAuthenticationModule(context: Context) : ExportedModule(context), Act
     promise.resolve(level)
   }
 
+  @ExpoMethod
+  fun getEnrolledSecureStoreLevelAsync(promise: Promise) {
+    var level = SECURITY_LEVEL_NONE
+    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {
+      val result = biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG)
+      if (result == BiometricManager.BIOMETRIC_SUCCESS) {
+        level = SECURITY_LEVEL_BIOMETRIC
+      }
+    } else {
+      val result = biometricManager.canAuthenticate(BiometricManager.Authenticators.DEVICE_CREDENTIAL)
+      if (result == BiometricManager.BIOMETRIC_SUCCESS) {
+        level = SECURITY_LEVEL_SECRET
+      }
+    }
+    promise.resolve(level)
+  }
+
   @ExpoMethod
   fun authenticateAsync(options: Map<String?, Any?>, promise: Promise) {
     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
diff --git a/node_modules/expo-local-authentication/build/LocalAuthentication.d.ts b/node_modules/expo-local-authentication/build/LocalAuthentication.d.ts
index 41a3f3f..1e2a0ad 100644
--- a/node_modules/expo-local-authentication/build/LocalAuthentication.d.ts
+++ b/node_modules/expo-local-authentication/build/LocalAuthentication.d.ts
@@ -14,6 +14,15 @@ export declare function hasHardwareAsync(): Promise<boolean>;
  * fingerprint and facial recognition. If none are supported, this method returns an empty array.
  */
 export declare function supportedAuthenticationTypesAsync(): Promise<AuthenticationType[]>;
+/**
+ * **(Android Only)**
+ * Determine what kinds of authentications are available on the device for expo-secure-store.
+ * @return Returns a promise which fulfils to an array containing [`AuthenticationType`s](#authenticationtype).
+ *
+ * Devices can support multiple authentication methods- i.e. `[1,2]` means the device supports both
+ * fingerprint and facial recognition. If none are supported, this method returns an empty array.
+ */
+export declare function supportedSecureStoreAuthenticationTypesAsync(): Promise<AuthenticationType[]>;
 /**
  * Determine whether the device has saved fingerprints or facial data to use for authentication.
  * @return Returns a promise which fulfils to `boolean` value indicating whether the device has
@@ -28,6 +37,15 @@ export declare function isEnrolledAsync(): Promise<boolean>;
  * prompts.
  */
 export declare function getEnrolledLevelAsync(): Promise<SecurityLevel>;
+/**
+ * **(Android Only)**
+ * Determine what kind of authentication is enrolled on the device availible for expo-secure-store.
+ * @return Returns a promise which fulfils with [`SecurityLevel`](#securitylevel).
+ * > **Note:** On Android devices prior to M, `SECRET` can be returned if only the SIM lock has been
+ * enrolled, which is not the method that [`authenticateAsync`](#localauthenticationauthenticateasyncoptions)
+ * prompts.
+ */
+export declare function getEnrolledSecureStoreLevelAsync(): Promise<SecurityLevel>;
 /**
  * Attempts to authenticate via Fingerprint/TouchID (or FaceID if available on the device).
  * > **Note:** Apple requires apps which use FaceID to provide a description of why they use this API.
diff --git a/node_modules/expo-local-authentication/build/LocalAuthentication.js b/node_modules/expo-local-authentication/build/LocalAuthentication.js
index 01b3dec..5972a1f 100644
--- a/node_modules/expo-local-authentication/build/LocalAuthentication.js
+++ b/node_modules/expo-local-authentication/build/LocalAuthentication.js
@@ -30,6 +30,21 @@ export async function supportedAuthenticationTypesAsync() {
     return await ExpoLocalAuthentication.supportedAuthenticationTypesAsync();
 }
 // @needsAudit
+/**
+ * **(Android Only)**
+ * Determine what kinds of authentications are available on the device for expo-secure-store.
+ * @return Returns a promise which fulfils to an array containing [`AuthenticationType`s](#authenticationtype).
+ *
+ * Devices can support multiple authentication methods- i.e. `[1,2]` means the device supports both
+ * fingerprint and facial recognition. If none are supported, this method returns an empty array.
+ */
+export async function supportedSecureStoreAuthenticationTypesAsync() {
+    if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {
+        throw new UnavailabilityError('expo-local-authentication', 'supportedSecureStoreAuthenticationTypesAsync');
+    }
+    return await ExpoLocalAuthentication.supportedSecureStoreAuthenticationTypesAsync();
+}
+// @needsAudit
 /**
  * Determine whether the device has saved fingerprints or facial data to use for authentication.
  * @return Returns a promise which fulfils to `boolean` value indicating whether the device has
@@ -56,6 +71,21 @@ export async function getEnrolledLevelAsync() {
     return await ExpoLocalAuthentication.getEnrolledLevelAsync();
 }
 // @needsAudit
+/**
+ * **(Android Only)**
+ * Determine what kind of authentication is enrolled on the device availible for expo-secure-store.
+ * @return Returns a promise which fulfils with [`SecurityLevel`](#securitylevel).
+ * > **Note:** On Android devices prior to M, `SECRET` can be returned if only the SIM lock has been
+ * enrolled, which is not the method that [`authenticateAsync`](#localauthenticationauthenticateasyncoptions)
+ * prompts.
+ */
+export async function getEnrolledSecureStoreLevelAsync() {
+    if (!ExpoLocalAuthentication.getEnrolledLevelAsync) {
+        throw new UnavailabilityError('expo-local-authentication', 'getEnrolledSecureStoreLevelAsync');
+    }
+    return await ExpoLocalAuthentication.getEnrolledLevelAsync();
+}
+// @needsAudit
 /**
  * Attempts to authenticate via Fingerprint/TouchID (or FaceID if available on the device).
  * > **Note:** Apple requires apps which use FaceID to provide a description of why they use this API.
diff --git a/node_modules/expo-local-authentication/build/LocalAuthentication.js.map b/node_modules/expo-local-authentication/build/LocalAuthentication.js.map
index 1ef642b..036ab6f 100644
--- a/node_modules/expo-local-authentication/build/LocalAuthentication.js.map
+++ b/node_modules/expo-local-authentication/build/LocalAuthentication.js.map
@@ -1 +1 @@
-{"version":3,"file":"LocalAuthentication.js","sourceRoot":"","sources":["../src/LocalAuthentication.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AACxD,OAAO,SAAS,MAAM,WAAW,CAAC;AAElC,OAAO,uBAAuB,MAAM,2BAA2B,CAAC;AAChE,OAAO,EAEL,kBAAkB,EAElB,aAAa,GACd,MAAM,6BAA6B,CAAC;AAErC,OAAO,EAA8B,kBAAkB,EAA6B,aAAa,EAAE,CAAC;AAEpG,cAAc;AACd;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,EAAE;QAC7C,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,kBAAkB,CAAC,CAAC;KAChF;IACD,OAAO,MAAM,uBAAuB,CAAC,gBAAgB,EAAE,CAAC;AAC1D,CAAC;AAED,cAAc;AACd;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,iCAAiC;IACrD,IAAI,CAAC,uBAAuB,CAAC,iCAAiC,EAAE;QAC9D,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,mCAAmC,CAAC,CAAC;KACjG;IACD,OAAO,MAAM,uBAAuB,CAAC,iCAAiC,EAAE,CAAC;AAC3E,CAAC;AAED,cAAc;AACd;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,eAAe;IACnC,IAAI,CAAC,uBAAuB,CAAC,eAAe,EAAE;QAC5C,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,iBAAiB,CAAC,CAAC;KAC/E;IACD,OAAO,MAAM,uBAAuB,CAAC,eAAe,EAAE,CAAC;AACzD,CAAC;AAED,cAAc;AACd;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,qBAAqB;IACzC,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,EAAE;QAClD,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,uBAAuB,CAAC,CAAC;KACrF;IACD,OAAO,MAAM,uBAAuB,CAAC,qBAAqB,EAAE,CAAC;AAC/D,CAAC;AAED,cAAc;AACd;;;;;;;;GAQG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,UAAsC,EAAE;IAExC,IAAI,CAAC,uBAAuB,CAAC,iBAAiB,EAAE;QAC9C,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,mBAAmB,CAAC,CAAC;KACjF;IAED,IAAI,OAAO,CAAC,cAAc,CAAC,eAAe,CAAC,EAAE;QAC3C,SAAS,CACP,OAAO,OAAO,CAAC,aAAa,KAAK,QAAQ,IAAI,OAAO,CAAC,aAAa,CAAC,MAAM,EACzE,6FAA6F,CAC9F,CAAC;KACH;IAED,MAAM,aAAa,GAAG,OAAO,CAAC,aAAa,IAAI,cAAc,CAAC;IAC9D,MAAM,MAAM,GAAG,MAAM,uBAAuB,CAAC,iBAAiB,CAAC,EAAE,GAAG,OAAO,EAAE,aAAa,EAAE,CAAC,CAAC;IAE9F,IAAI,MAAM,CAAC,OAAO,EAAE;QAClB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;KAC9B;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,cAAc;AACd;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB;IACtC,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,EAAE;QAC/C,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,oBAAoB,CAAC,CAAC;KAClF;IACD,MAAM,uBAAuB,CAAC,kBAAkB,EAAE,CAAC;AACrD,CAAC","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport ExpoLocalAuthentication from './ExpoLocalAuthentication';\nimport {\n  LocalAuthenticationOptions,\n  AuthenticationType,\n  LocalAuthenticationResult,\n  SecurityLevel,\n} from './LocalAuthentication.types';\n\nexport { LocalAuthenticationOptions, AuthenticationType, LocalAuthenticationResult, SecurityLevel };\n\n// @needsAudit\n/**\n * Determine whether a face or fingerprint scanner is available on the device.\n * @return Returns a promise which fulfils with a `boolean` value indicating whether a face or\n * fingerprint scanner is available on this device.\n */\nexport async function hasHardwareAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.hasHardwareAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'hasHardwareAsync');\n  }\n  return await ExpoLocalAuthentication.hasHardwareAsync();\n}\n\n// @needsAudit\n/**\n * Determine what kinds of authentications are available on the device.\n * @return Returns a promise which fulfils to an array containing [`AuthenticationType`s](#authenticationtype).\n *\n * Devices can support multiple authentication methods- i.e. `[1,2]` means the device supports both\n * fingerprint and facial recognition. If none are supported, this method returns an empty array.\n */\nexport async function supportedAuthenticationTypesAsync(): Promise<AuthenticationType[]> {\n  if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'supportedAuthenticationTypesAsync');\n  }\n  return await ExpoLocalAuthentication.supportedAuthenticationTypesAsync();\n}\n\n// @needsAudit\n/**\n * Determine whether the device has saved fingerprints or facial data to use for authentication.\n * @return Returns a promise which fulfils to `boolean` value indicating whether the device has\n * saved fingerprints or facial data for authentication.\n */\nexport async function isEnrolledAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.isEnrolledAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'isEnrolledAsync');\n  }\n  return await ExpoLocalAuthentication.isEnrolledAsync();\n}\n\n// @needsAudit\n/**\n * Determine what kind of authentication is enrolled on the device.\n * @return Returns a promise which fulfils with [`SecurityLevel`](#securitylevel).\n * > **Note:** On Android devices prior to M, `SECRET` can be returned if only the SIM lock has been\n * enrolled, which is not the method that [`authenticateAsync`](#localauthenticationauthenticateasyncoptions)\n * prompts.\n */\nexport async function getEnrolledLevelAsync(): Promise<SecurityLevel> {\n  if (!ExpoLocalAuthentication.getEnrolledLevelAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'getEnrolledLevelAsync');\n  }\n  return await ExpoLocalAuthentication.getEnrolledLevelAsync();\n}\n\n// @needsAudit\n/**\n * Attempts to authenticate via Fingerprint/TouchID (or FaceID if available on the device).\n * > **Note:** Apple requires apps which use FaceID to provide a description of why they use this API.\n * If you try to use FaceID on an iPhone with FaceID without providing `infoPlist.NSFaceIDUsageDescription`\n * in `app.json`, the module will authenticate using device passcode. For more information about\n * usage descriptions on iOS, see [Deploying to App Stores](/distribution/app-stores#system-permissions-dialogs-on-ios).\n * @param options\n * @return Returns a promise which fulfils with [`LocalAuthenticationResult`](#localauthenticationresult).\n */\nexport async function authenticateAsync(\n  options: LocalAuthenticationOptions = {}\n): Promise<LocalAuthenticationResult> {\n  if (!ExpoLocalAuthentication.authenticateAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'authenticateAsync');\n  }\n\n  if (options.hasOwnProperty('promptMessage')) {\n    invariant(\n      typeof options.promptMessage === 'string' && options.promptMessage.length,\n      'LocalAuthentication.authenticateAsync : `options.promptMessage` must be a non-empty string.'\n    );\n  }\n\n  const promptMessage = options.promptMessage || 'Authenticate';\n  const result = await ExpoLocalAuthentication.authenticateAsync({ ...options, promptMessage });\n\n  if (result.warning) {\n    console.warn(result.warning);\n  }\n  return result;\n}\n\n// @needsAudit\n/**\n * **(Android Only)** Cancels authentication flow.\n */\nexport async function cancelAuthenticate(): Promise<void> {\n  if (!ExpoLocalAuthentication.cancelAuthenticate) {\n    throw new UnavailabilityError('expo-local-authentication', 'cancelAuthenticate');\n  }\n  await ExpoLocalAuthentication.cancelAuthenticate();\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"LocalAuthentication.js","sourceRoot":"","sources":["../src/LocalAuthentication.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport ExpoLocalAuthentication from './ExpoLocalAuthentication';\nimport {\n  LocalAuthenticationOptions,\n  AuthenticationType,\n  LocalAuthenticationResult,\n  SecurityLevel,\n} from './LocalAuthentication.types';\n\nexport { LocalAuthenticationOptions, AuthenticationType, LocalAuthenticationResult, SecurityLevel };\n\n// @needsAudit\n/**\n * Determine whether a face or fingerprint scanner is available on the device.\n * @return Returns a promise which fulfils with a `boolean` value indicating whether a face or\n * fingerprint scanner is available on this device.\n */\nexport async function hasHardwareAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.hasHardwareAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'hasHardwareAsync');\n  }\n  return await ExpoLocalAuthentication.hasHardwareAsync();\n}\n\n// @needsAudit\n/**\n * Determine what kinds of authentications are available on the device.\n * @return Returns a promise which fulfils to an array containing [`AuthenticationType`s](#authenticationtype).\n *\n * Devices can support multiple authentication methods- i.e. `[1,2]` means the device supports both\n * fingerprint and facial recognition. If none are supported, this method returns an empty array.\n */\nexport async function supportedAuthenticationTypesAsync(): Promise<AuthenticationType[]> {\n  if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'supportedAuthenticationTypesAsync');\n  }\n  return await ExpoLocalAuthentication.supportedAuthenticationTypesAsync();\n}\n\n// @needsAudit\n/**\n * **(Android Only)**\n * Determine what kinds of authentications are available on the device for expo-secure-store.\n * @return Returns a promise which fulfils to an array containing [`AuthenticationType`s](#authenticationtype).\n *\n * Devices can support multiple authentication methods- i.e. `[1,2]` means the device supports both\n * fingerprint and facial recognition. If none are supported, this method returns an empty array.\n */\nexport async function supportedSecureStoreAuthenticationTypesAsync(): Promise<AuthenticationType[]> {\n  if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'supportedSecureStoreAuthenticationTypesAsync');\n  }\n  return await ExpoLocalAuthentication.supportedSecureStoreAuthenticationTypesAsync();\n}\n\n// @needsAudit\n/**\n * Determine whether the device has saved fingerprints or facial data to use for authentication.\n * @return Returns a promise which fulfils to `boolean` value indicating whether the device has\n * saved fingerprints or facial data for authentication.\n */\nexport async function isEnrolledAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.isEnrolledAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'isEnrolledAsync');\n  }\n  return await ExpoLocalAuthentication.isEnrolledAsync();\n}\n\n// @needsAudit\n/**\n * Determine what kind of authentication is enrolled on the device.\n * @return Returns a promise which fulfils with [`SecurityLevel`](#securitylevel).\n * > **Note:** On Android devices prior to M, `SECRET` can be returned if only the SIM lock has been\n * enrolled, which is not the method that [`authenticateAsync`](#localauthenticationauthenticateasyncoptions)\n * prompts.\n */\nexport async function getEnrolledLevelAsync(): Promise<SecurityLevel> {\n  if (!ExpoLocalAuthentication.getEnrolledLevelAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'getEnrolledLevelAsync');\n  }\n  return await ExpoLocalAuthentication.getEnrolledLevelAsync();\n}\n\n// @needsAudit\n/**\n * **(Android Only)**\n * Determine what kind of authentication is enrolled on the device availible for expo-secure-store.\n * @return Returns a promise which fulfils with [`SecurityLevel`](#securitylevel).\n * > **Note:** On Android devices prior to M, `SECRET` can be returned if only the SIM lock has been\n * enrolled, which is not the method that [`authenticateAsync`](#localauthenticationauthenticateasyncoptions)\n * prompts.\n */\nexport async function getEnrolledSecureStoreLevelAsync(): Promise<SecurityLevel> {\n  if (!ExpoLocalAuthentication.getEnrolledLevelAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'getEnrolledSecureStoreLevelAsync');\n  }\n  return await ExpoLocalAuthentication.getEnrolledLevelAsync();\n}\n\n// @needsAudit\n/**\n * Attempts to authenticate via Fingerprint/TouchID (or FaceID if available on the device).\n * > **Note:** Apple requires apps which use FaceID to provide a description of why they use this API.\n * If you try to use FaceID on an iPhone with FaceID without providing `infoPlist.NSFaceIDUsageDescription`\n * in `app.json`, the module will authenticate using device passcode. For more information about\n * usage descriptions on iOS, see [Deploying to App Stores](/distribution/app-stores#system-permissions-dialogs-on-ios).\n * @param options\n * @return Returns a promise which fulfils with [`LocalAuthenticationResult`](#localauthenticationresult).\n */\nexport async function authenticateAsync(\n  options: LocalAuthenticationOptions = {}\n): Promise<LocalAuthenticationResult> {\n  if (!ExpoLocalAuthentication.authenticateAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'authenticateAsync');\n  }\n\n  if (options.hasOwnProperty('promptMessage')) {\n    invariant(\n      typeof options.promptMessage === 'string' && options.promptMessage.length,\n      'LocalAuthentication.authenticateAsync : `options.promptMessage` must be a non-empty string.'\n    );\n  }\n\n  const promptMessage = options.promptMessage || 'Authenticate';\n  const result = await ExpoLocalAuthentication.authenticateAsync({ ...options, promptMessage });\n\n  if (result.warning) {\n    console.warn(result.warning);\n  }\n  return result;\n}\n\n// @needsAudit\n/**\n * **(Android Only)** Cancels authentication flow.\n */\nexport async function cancelAuthenticate(): Promise<void> {\n  if (!ExpoLocalAuthentication.cancelAuthenticate) {\n    throw new UnavailabilityError('expo-local-authentication', 'cancelAuthenticate');\n  }\n  await ExpoLocalAuthentication.cancelAuthenticate();\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-local-authentication/build/LocalAuthentication.types.d.ts b/node_modules/expo-local-authentication/build/LocalAuthentication.types.d.ts
index 1f04b07..64ef0f7 100644
--- a/node_modules/expo-local-authentication/build/LocalAuthentication.types.d.ts
+++ b/node_modules/expo-local-authentication/build/LocalAuthentication.types.d.ts
@@ -18,7 +18,12 @@ export declare enum AuthenticationType {
      * Indicates iris recognition support.
      * @platform android
      */
-    IRIS = 3
+    IRIS = 3,
+    /**
+     * Indicates passcode support.
+     * @platform android
+     */
+    PASSCODE = 4
 }
 export declare enum SecurityLevel {
     /**
diff --git a/node_modules/expo-local-authentication/build/LocalAuthentication.types.js b/node_modules/expo-local-authentication/build/LocalAuthentication.types.js
index 05cc61f..7a61db2 100644
--- a/node_modules/expo-local-authentication/build/LocalAuthentication.types.js
+++ b/node_modules/expo-local-authentication/build/LocalAuthentication.types.js
@@ -14,6 +14,11 @@ export var AuthenticationType;
      * @platform android
      */
     AuthenticationType[AuthenticationType["IRIS"] = 3] = "IRIS";
+    /**
+     * Indicates passcode support.
+     * @platform android
+     */
+    AuthenticationType[AuthenticationType["PASSCODE"] = 4] = "PASSCODE";
 })(AuthenticationType || (AuthenticationType = {}));
 // @needsAudit
 export var SecurityLevel;
diff --git a/node_modules/expo-local-authentication/build/LocalAuthentication.types.js.map b/node_modules/expo-local-authentication/build/LocalAuthentication.types.js.map
index 3eba2b5..456855d 100644
--- a/node_modules/expo-local-authentication/build/LocalAuthentication.types.js.map
+++ b/node_modules/expo-local-authentication/build/LocalAuthentication.types.js.map
@@ -1 +1 @@
-{"version":3,"file":"LocalAuthentication.types.js","sourceRoot":"","sources":["../src/LocalAuthentication.types.ts"],"names":[],"mappings":"AAIA,cAAc;AACd,MAAM,CAAN,IAAY,kBAcX;AAdD,WAAY,kBAAkB;IAC5B;;OAEG;IACH,yEAAe,CAAA;IACf;;OAEG;IACH,uFAAsB,CAAA;IACtB;;;OAGG;IACH,2DAAQ,CAAA;AACV,CAAC,EAdW,kBAAkB,KAAlB,kBAAkB,QAc7B;AAED,cAAc;AACd,MAAM,CAAN,IAAY,aAaX;AAbD,WAAY,aAAa;IACvB;;OAEG;IACH,iDAAQ,CAAA;IACR;;OAEG;IACH,qDAAU,CAAA;IACV;;OAEG;IACH,2DAAa,CAAA;AACf,CAAC,EAbW,aAAa,KAAb,aAAa,QAaxB","sourcesContent":["export type LocalAuthenticationResult =\n  | { success: true }\n  | { success: false; error: string; warning?: string };\n\n// @needsAudit\nexport enum AuthenticationType {\n  /**\n   * Indicates fingerprint support.\n   */\n  FINGERPRINT = 1,\n  /**\n   * Indicates facial recognition support.\n   */\n  FACIAL_RECOGNITION = 2,\n  /**\n   * Indicates iris recognition support.\n   * @platform android\n   */\n  IRIS = 3,\n}\n\n// @needsAudit\nexport enum SecurityLevel {\n  /**\n   * Indicates no enrolled authentication.\n   */\n  NONE = 0,\n  /**\n   * Indicates non-biometric authentication (e.g. PIN, Pattern).\n   */\n  SECRET = 1,\n  /**\n   * Indicates biometric authentication.\n   */\n  BIOMETRIC = 2,\n}\n\n// @needsAudit\nexport type LocalAuthenticationOptions = {\n  /**\n   * A message that is shown alongside the TouchID or FaceID prompt.\n   */\n  promptMessage?: string;\n  /**\n   * Allows to customize the default `Cancel` label shown.\n   */\n  cancelLabel?: string;\n  /**\n   * After several failed attempts the system will fallback to the device passcode. This setting\n   * allows you to disable this option and instead handle the fallback yourself. This can be\n   * preferable in certain custom authentication workflows. This behaviour maps to using the iOS\n   * [LAPolicyDeviceOwnerAuthenticationWithBiometrics](https://developer.apple.com/documentation/localauthentication/lapolicy/lapolicydeviceownerauthenticationwithbiometrics?language=objc)\n   * policy rather than the [LAPolicyDeviceOwnerAuthentication](https://developer.apple.com/documentation/localauthentication/lapolicy/lapolicydeviceownerauthentication?language=objc)\n   * policy. Defaults to `false`.\n   */\n  disableDeviceFallback?: boolean;\n  /**\n   * Allows to customize the default `Use Passcode` label shown after several failed\n   * authentication attempts. Setting this option to an empty string disables this button from\n   * showing in the prompt.\n   * @platform ios\n   */\n  fallbackLabel?: string;\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"LocalAuthentication.types.js","sourceRoot":"","sources":["../src/LocalAuthentication.types.ts"],"names":[],"mappings":"AAIA,cAAc;AACd,MAAM,CAAN,IAAY,kBAmBX;AAnBD,WAAY,kBAAkB;IAC5B;;OAEG;IACH,yEAAe,CAAA;IACf;;OAEG;IACH,uFAAsB,CAAA;IACtB;;;OAGG;IACH,2DAAQ,CAAA;IACR;;;OAGG;IACH,mEAAY,CAAA;AACd,CAAC,EAnBW,kBAAkB,KAAlB,kBAAkB,QAmB7B;AAED,cAAc;AACd,MAAM,CAAN,IAAY,aAaX;AAbD,WAAY,aAAa;IACvB;;OAEG;IACH,iDAAQ,CAAA;IACR;;OAEG;IACH,qDAAU,CAAA;IACV;;OAEG;IACH,2DAAa,CAAA;AACf,CAAC,EAbW,aAAa,KAAb,aAAa,QAaxB","sourcesContent":["export type LocalAuthenticationResult =\n  | { success: true }\n  | { success: false; error: string; warning?: string };\n\n// @needsAudit\nexport enum AuthenticationType {\n  /**\n   * Indicates fingerprint support.\n   */\n  FINGERPRINT = 1,\n  /**\n   * Indicates facial recognition support.\n   */\n  FACIAL_RECOGNITION = 2,\n  /**\n   * Indicates iris recognition support.\n   * @platform android\n   */\n  IRIS = 3,\n  /**\n   * Indicates passcode support.\n   * @platform android\n   */\n  PASSCODE = 4,\n}\n\n// @needsAudit\nexport enum SecurityLevel {\n  /**\n   * Indicates no enrolled authentication.\n   */\n  NONE = 0,\n  /**\n   * Indicates non-biometric authentication (e.g. PIN, Pattern).\n   */\n  SECRET = 1,\n  /**\n   * Indicates biometric authentication.\n   */\n  BIOMETRIC = 2,\n}\n\n// @needsAudit\nexport type LocalAuthenticationOptions = {\n  /**\n   * A message that is shown alongside the TouchID or FaceID prompt.\n   */\n  promptMessage?: string;\n  /**\n   * Allows to customize the default `Cancel` label shown.\n   */\n  cancelLabel?: string;\n  /**\n   * After several failed attempts the system will fallback to the device passcode. This setting\n   * allows you to disable this option and instead handle the fallback yourself. This can be\n   * preferable in certain custom authentication workflows. This behaviour maps to using the iOS\n   * [LAPolicyDeviceOwnerAuthenticationWithBiometrics](https://developer.apple.com/documentation/localauthentication/lapolicy/lapolicydeviceownerauthenticationwithbiometrics?language=objc)\n   * policy rather than the [LAPolicyDeviceOwnerAuthentication](https://developer.apple.com/documentation/localauthentication/lapolicy/lapolicydeviceownerauthentication?language=objc)\n   * policy. Defaults to `false`.\n   */\n  disableDeviceFallback?: boolean;\n  /**\n   * Allows to customize the default `Use Passcode` label shown after several failed\n   * authentication attempts. Setting this option to an empty string disables this button from\n   * showing in the prompt.\n   * @platform ios\n   */\n  fallbackLabel?: string;\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-local-authentication/src/LocalAuthentication.ts b/node_modules/expo-local-authentication/src/LocalAuthentication.ts
index 100da91..0a5d684 100644
--- a/node_modules/expo-local-authentication/src/LocalAuthentication.ts
+++ b/node_modules/expo-local-authentication/src/LocalAuthentication.ts
@@ -39,6 +39,22 @@ export async function supportedAuthenticationTypesAsync(): Promise<Authenticatio
   return await ExpoLocalAuthentication.supportedAuthenticationTypesAsync();
 }
 
+// @needsAudit
+/**
+ * **(Android Only)**
+ * Determine what kinds of authentications are available on the device for expo-secure-store.
+ * @return Returns a promise which fulfils to an array containing [`AuthenticationType`s](#authenticationtype).
+ *
+ * Devices can support multiple authentication methods- i.e. `[1,2]` means the device supports both
+ * fingerprint and facial recognition. If none are supported, this method returns an empty array.
+ */
+export async function supportedSecureStoreAuthenticationTypesAsync(): Promise<AuthenticationType[]> {
+  if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {
+    throw new UnavailabilityError('expo-local-authentication', 'supportedSecureStoreAuthenticationTypesAsync');
+  }
+  return await ExpoLocalAuthentication.supportedSecureStoreAuthenticationTypesAsync();
+}
+
 // @needsAudit
 /**
  * Determine whether the device has saved fingerprints or facial data to use for authentication.
@@ -67,6 +83,22 @@ export async function getEnrolledLevelAsync(): Promise<SecurityLevel> {
   return await ExpoLocalAuthentication.getEnrolledLevelAsync();
 }
 
+// @needsAudit
+/**
+ * **(Android Only)**
+ * Determine what kind of authentication is enrolled on the device availible for expo-secure-store.
+ * @return Returns a promise which fulfils with [`SecurityLevel`](#securitylevel).
+ * > **Note:** On Android devices prior to M, `SECRET` can be returned if only the SIM lock has been
+ * enrolled, which is not the method that [`authenticateAsync`](#localauthenticationauthenticateasyncoptions)
+ * prompts.
+ */
+export async function getEnrolledSecureStoreLevelAsync(): Promise<SecurityLevel> {
+  if (!ExpoLocalAuthentication.getEnrolledLevelAsync) {
+    throw new UnavailabilityError('expo-local-authentication', 'getEnrolledSecureStoreLevelAsync');
+  }
+  return await ExpoLocalAuthentication.getEnrolledLevelAsync();
+}
+
 // @needsAudit
 /**
  * Attempts to authenticate via Fingerprint/TouchID (or FaceID if available on the device).
diff --git a/node_modules/expo-local-authentication/src/LocalAuthentication.types.ts b/node_modules/expo-local-authentication/src/LocalAuthentication.types.ts
index 9e76664..cc82c16 100644
--- a/node_modules/expo-local-authentication/src/LocalAuthentication.types.ts
+++ b/node_modules/expo-local-authentication/src/LocalAuthentication.types.ts
@@ -17,6 +17,11 @@ export enum AuthenticationType {
    * @platform android
    */
   IRIS = 3,
+  /**
+   * Indicates passcode support.
+   * @platform android
+   */
+  PASSCODE = 4,
 }
 
 // @needsAudit